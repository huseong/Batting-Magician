TODO: 전체적인 게임 진행에 대한 총 정리 파일이다.
이 파일을 통해 어떤 기능이 어디 구현되어있는지 알 수 있다.

유저가 게임에 접속하게 되면 FrontServer 에 연결된다.


TODO: Front Server 
다음 문단은 FrontServer에서의 Routine에 대해 설명한다.
이 문단의 전역을 제외한 Dir은 모두 src/server/frontServer 하위를 의미한다.

플레이어가 연결되면 가장 먼저 플레이어의 버전을 확인한다. (./function/checkVersion.js)
결과에 따라 다음 절차로 넘어가거나 플레이어에게 업데이트를 요청한다.

그 후 인증의 절차를 거치고 (./function/auth.js)
결과에 따라 가입을 요청하거나 (./function/signUp.js)
플레이어를 로비로 보낸다. (./function/toLobbyServer.js)


TODO: Lobby Server
다음 문단은 LobbyServer에서의 Routine에 대해 설명한다.
이 문단의 전역을 제외한 Dir은 모두 src/server/lobbyServer 하위를 의미한다.

플레이어가 연결되면 유저의 정보를 보내준다. (function/resUserInfo.js)
이 때 유저의 정보는 유저 모델에 구현되어 있다. (model/user/user.model.js/sendDataForLobby.js)


TODO: Lobby Server/Arena
다음 글은 LobbyServer의 Arena Routine에 대해 설명한다.
이 문단의 전역을 제외한 Dir은 모두 src/server/lobbyServer/arena 하위를 의미한다.

플레이어가 로비 서버에 연결되면 또한 ArenaManager에 연결되게 된다. (./arenaManager.js)
ArenaManager는 로비 서버에서 아레나의 매치 및 연결을 구현하고자 하기 위해 만들어진 매니저이다.

플레이어가 매칭을 하고자 한다면 대기 풀에 유저가 등록되게 된다. (./function/setUserToWaitingPool.js)

ArenaManager는 자신의 matchCycle에 따라 주기적으로 임시 아레나를 만들게 된다. (./function/generateTempMatch.js)
임시 아레나는 다음과 같은 규칙으로 만들어 진다.

1. 유저를 flag(rank), 즉 실력 순서로 정렬한다. 이 때 정렬된 이 배열을 rankOrderedArray라 한다.
2. 유저를 time, 즉 매치를 위해 기다린 시간 순서로 정렬한다. 이 때 정렬된 이 배열을 timeOrderedArray라 한다.
3. timeOrderedArray에서 가장 우선 순위에 있는 유저부터 다음을 시행한다.
  3-1. rankOrderedArray에서 이 유저를 포함하고 12명으로 구성된 배열을 여러개 추출한다.
  3-2. 이렇게 만들어진 배열들에서 각각의 표준편차를 구한다.
  3-3. 가장 표준 편차가 낮은 배열. 즉 가장 밸런스가 맞는 배열을 구한다.
  3-4. 만약 이 배열의 표준 편차가 최대한 용인할 수 있는 정도보다 낮다면 매치를 만든다.



