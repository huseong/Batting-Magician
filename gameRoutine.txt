TODO: 전체적인 게임 진행에 대한 총 정리 파일이다.
이 파일을 통해 어떤 기능이 어디 구현되어있는지 알 수 있다.

유저가 게임에 접속하게 되면 FrontServer 에 연결된다.


TODO: Front Server 
다음 문단은 FrontServer에서의 Routine에 대해 설명한다.
이 문단의 전역을 제외한 Dir은 모두 src/server/frontServer 하위를 의미한다.

플레이어가 연결되면 가장 먼저 플레이어의 버전을 확인한다. (./function/checkVersion.js)
결과에 따라 다음 절차로 넘어가거나 플레이어에게 업데이트를 요청한다.

그 후 인증의 절차를 거치고 (./function/auth.js)
결과에 따라 가입을 요청하거나 (./function/signUp.js)
플레이어를 로비로 보낸다. (./function/toLobbyServer.js)


TODO: Lobby Server
다음 문단은 LobbyServer에서의 Routine에 대해 설명한다.
이 문단의 전역을 제외한 Dir은 모두 src/server/lobbyServer 하위를 의미한다.

플레이어가 연결되면 유저의 정보를 보내준다. (function/resUserInfo.js)
이 때 유저의 정보는 유저 모델에 구현되어 있다. (model/user/user.model.js/sendDataForLobby.js)


TODO: LobbyServer/Relation
다음 문단은 LobbyServer에서의 Relation Routine에 대해 설명한다.
Relation은 유저가 다른 유저와 맺는 관계에 대해 다루는 부분이다.

친구 목록은 다음과 같은 순서로 정렬한다.
활성화 유저 - 비활성화 유저
내부는 다음과 같이 정렬 된다.
마지막 접속일로부터 시간 순서 


TODO: LobbyServer/Card
덱 보기
덱 수정

TODO: LobbyServer/Character
캐릭터 보기
캐릭터 수정


TODO: Lobby Server/Arena
다음 문단은 LobbyServer의 Arena Routine에 대해 설명한다.
이 문단의 전역을 제외한 Dir은 모두 src/server/lobbyServer/arena 하위를 의미한다.

플레이어가 로비 서버에 연결되면 또한 ArenaManager에 연결되게 된다. (./arenaManager.js)
ArenaManager는 로비 서버에서 아레나의 매치 및 연결을 구현하고자 하기 위해 만들어진 매니저이다.

플레이어가 매칭을 하고자 한다면 대기 풀에 유저가 등록되게 된다. (./function/setUserToWaitingPool.js)

ArenaManager는 자신의 matchCycle에 따라 주기적으로 임시 아레나를 만들게 된다. (./function/generateTempArena.js)
임시 아레나는 다음과 같은 규칙으로 만들어 진다.

1. 유저를 flag(rank), 즉 실력 순서로 정렬한다. 이 때 정렬된 이 배열을 rankOrderedArray라 한다.
2. 유저를 time, 즉 매치를 위해 기다린 시간 순서로 정렬한다. 이 때 정렬된 이 배열을 timeOrderedArray라 한다.
3. timeOrderedArray에서 가장 우선 순위에 있는 유저부터 다음을 시행한다.
  3-1. rankOrderedArray에서 이 유저를 포함하고 12명으로 구성된 배열을 여러개 추출한다.
  3-2. 이렇게 만들어진 배열들에서 각각의 표준편차를 구한다.
  3-3. 가장 표준 편차가 낮은 배열. 즉 가장 밸런스가 맞는 배열을 구한다.
  3-4. 만약 이 배열의 표준 편차가 최대한 용인할 수 있는 정도보다 낮다면 매치를 만든다.
4. 만약 위의 시행을 끝냈을 때 만들어진 배열이 일정 정도 이하로 만들어졌다면 용인할 수 있는 표준편차의 한도를 높인다.

임시 아레나가 만들어지면 해당 아레나에 속한 모든 유저들에 대해 탈주 상태가 아닌지 확인한다. (./function/checkNotAfk.js)
만약 누군가가 연결이 끊기거나 AFK상태가 되면 다른 유저들은 다시 ArenaManager의 Pool에 들어가게 된다. (./function/cancelMatch.js)
이 확인은 8초동안 수행되며 모두가 AFK 상태가 아니라는 요청을 보내면 아레나가 만들어지게된다. (./function/generateArena.js)
아레나는 먼저 아레나 모델을 통해 DB상에서 만들어진다. (model/arena/arena.model.js)
이하 내용은 아래에 서술한다.


TODO: Generate ArenaModel
다음 문단은 ArenaModel이 만들어지는 Rountine에 대해 설명한다.
이 문단의 전역을 제외한 Dir은 모두 src/model/arena 하위를 의미한다.



TODO: Arena Server
다음 문단은 Arena Server의 Routine에 대해 설명한다.
이 문단의 Dir은 기본적으로 src/server/arenaServer 하위를 의미한다.

DB상에서 만들어진 아레나 모델은 게임 서버 할당되고 게임 서버는 아레나 모델을 따라 아레나 클래스를 만들게 된다.
아레나 클래스가 만들어지면 게임 서버는 이제 게임 서버로 접속하는 유저들을 받을 준비가 됬다.


TODO: Laboratory Server
다음 문단은 Laboratory Server의 Routine에 대해 설명한다.

// 매 접속마다 동기화할 거
돈, 메타정보

// 클라이언트에 저장해놓을 것
채팅 정보, 친구 요청

// 인 게임 테스트 방법
캐릭터를 하나 만든다. 맵을 일자로 쭉 만든다. 유저 입력에 따라 캐릭터를 달리게 한다.

// TEMP 문서
팀이 만들어지고 유저에게는 60초의 시간이 주어진다.
이 때 팀원과 함께 전략을 협의하면서 사용할 덱을 정하고 참여할 캐릭터의 순서를 바꿀 수 있다.
클라이언트의 백그라운드에서는 맵을 만든다. 60초가 끝나면 화면이 암전되고 로딩 중이라는 처리와 함께
맵 상에 캐릭터가 나타며 모든 세팅을 마친다. 그리고 카운트다운과 함께 경기가 시작된다.


